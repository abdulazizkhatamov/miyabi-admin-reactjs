/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as authRouteRouteImport } from './routes/(auth)/route'
import { Route as appRouteRouteImport } from './routes/(app)/route'
import { Route as appIndexRouteImport } from './routes/(app)/index'
import { Route as authLoginRouteImport } from './routes/(auth)/login'
import { Route as appProductsRouteImport } from './routes/(app)/products'
import { Route as appCategoriesIndexRouteImport } from './routes/(app)/categories/index'
import { Route as appCategoriesIdIndexRouteImport } from './routes/(app)/categories/$id/index'

const authRouteRoute = authRouteRouteImport.update({
  id: '/(auth)',
  getParentRoute: () => rootRouteImport,
} as any)
const appRouteRoute = appRouteRouteImport.update({
  id: '/(app)',
  getParentRoute: () => rootRouteImport,
} as any)
const appIndexRoute = appIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => appRouteRoute,
} as any)
const authLoginRoute = authLoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => authRouteRoute,
} as any)
const appProductsRoute = appProductsRouteImport.update({
  id: '/products',
  path: '/products',
  getParentRoute: () => appRouteRoute,
} as any)
const appCategoriesIndexRoute = appCategoriesIndexRouteImport.update({
  id: '/categories/',
  path: '/categories/',
  getParentRoute: () => appRouteRoute,
} as any)
const appCategoriesIdIndexRoute = appCategoriesIdIndexRouteImport.update({
  id: '/categories/$id/',
  path: '/categories/$id/',
  getParentRoute: () => appRouteRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof appIndexRoute
  '/products': typeof appProductsRoute
  '/login': typeof authLoginRoute
  '/categories': typeof appCategoriesIndexRoute
  '/categories/$id': typeof appCategoriesIdIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof appIndexRoute
  '/products': typeof appProductsRoute
  '/login': typeof authLoginRoute
  '/categories': typeof appCategoriesIndexRoute
  '/categories/$id': typeof appCategoriesIdIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/(app)': typeof appRouteRouteWithChildren
  '/(auth)': typeof authRouteRouteWithChildren
  '/(app)/products': typeof appProductsRoute
  '/(auth)/login': typeof authLoginRoute
  '/(app)/': typeof appIndexRoute
  '/(app)/categories/': typeof appCategoriesIndexRoute
  '/(app)/categories/$id/': typeof appCategoriesIdIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/products' | '/login' | '/categories' | '/categories/$id'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/products' | '/login' | '/categories' | '/categories/$id'
  id:
    | '__root__'
    | '/(app)'
    | '/(auth)'
    | '/(app)/products'
    | '/(auth)/login'
    | '/(app)/'
    | '/(app)/categories/'
    | '/(app)/categories/$id/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  appRouteRoute: typeof appRouteRouteWithChildren
  authRouteRoute: typeof authRouteRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/(auth)': {
      id: '/(auth)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof authRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(app)': {
      id: '/(app)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof appRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(app)/': {
      id: '/(app)/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof appIndexRouteImport
      parentRoute: typeof appRouteRoute
    }
    '/(auth)/login': {
      id: '/(auth)/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof authLoginRouteImport
      parentRoute: typeof authRouteRoute
    }
    '/(app)/products': {
      id: '/(app)/products'
      path: '/products'
      fullPath: '/products'
      preLoaderRoute: typeof appProductsRouteImport
      parentRoute: typeof appRouteRoute
    }
    '/(app)/categories/': {
      id: '/(app)/categories/'
      path: '/categories'
      fullPath: '/categories'
      preLoaderRoute: typeof appCategoriesIndexRouteImport
      parentRoute: typeof appRouteRoute
    }
    '/(app)/categories/$id/': {
      id: '/(app)/categories/$id/'
      path: '/categories/$id'
      fullPath: '/categories/$id'
      preLoaderRoute: typeof appCategoriesIdIndexRouteImport
      parentRoute: typeof appRouteRoute
    }
  }
}

interface appRouteRouteChildren {
  appProductsRoute: typeof appProductsRoute
  appIndexRoute: typeof appIndexRoute
  appCategoriesIndexRoute: typeof appCategoriesIndexRoute
  appCategoriesIdIndexRoute: typeof appCategoriesIdIndexRoute
}

const appRouteRouteChildren: appRouteRouteChildren = {
  appProductsRoute: appProductsRoute,
  appIndexRoute: appIndexRoute,
  appCategoriesIndexRoute: appCategoriesIndexRoute,
  appCategoriesIdIndexRoute: appCategoriesIdIndexRoute,
}

const appRouteRouteWithChildren = appRouteRoute._addFileChildren(
  appRouteRouteChildren,
)

interface authRouteRouteChildren {
  authLoginRoute: typeof authLoginRoute
}

const authRouteRouteChildren: authRouteRouteChildren = {
  authLoginRoute: authLoginRoute,
}

const authRouteRouteWithChildren = authRouteRoute._addFileChildren(
  authRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  appRouteRoute: appRouteRouteWithChildren,
  authRouteRoute: authRouteRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
